<?php

/** 
 * Implements hook_menu()
*/
function journalstream_biblio_import_menu() {
  $items = array();
  $items['node/%node/import'] = array(
    'title' => 'Pubmed Import',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('journalstream_biblio_import_form'),
    'access callback' => 'journalstream_biblio_import_local_task_loader',
    'access arguments' => array(1),
    'weight' => 8,
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function journalstream_biblio_import_admin_paths() {
  $paths = array( 
    'node/*/import' => TRUE,
  );
  return $paths;
}


/**
 * Access callback for ONLY displaying the journalstream_collections local tasks
 * if the node type is SCFC_TOPIC_QUEUE_TYPE (defined in journalstream_collections module)
*/
function journalstream_biblio_import_local_task_loader($node) {
  global $user;

  //Check node access perms
  $access_granted = node_access('update', $node);

  if($node->type == JS_TOPIC_QUEUE_TYPE && $access_granted) {
    return TRUE;
  }
  else {
    return FALSE;
  }  
}

/**
 * Implements hook_form()
 * 
 * Return a form used to import files into biblio.
 *
 * @return
 *   An array which will be used by the form builder to build the import form
 */
function journalstream_biblio_import_form($form_state) {
  global $user;
  $node = menu_get_object();
  $queue_options = array( 
    'not_reviewed' => 'Not Reviewed',
    'accepted' => 'Accepted',
    'rejected' => 'Rejected',
  );

  // Defaults to a csv list of pubmed files 
  $form['filetype'] = array (
    '#type' => 'value',
    '#value' => 'biblio_pm',
  );
  $form['journalstream_biblio_import_file'] = array (
    '#type' => 'file',
    '#title' => t('Import file'),
    '#size' => 60,
    '#description' => t('A CSV file containing list of Pubmed ID\'s to import.'),
  );
  $form['journalstream_biblio_import_raw'] = array (
    '#type' => 'textarea',
    '#title' => t('Import data'),
    '#default_value' => '',
    '#description' => t('Paste a comma seperated list of pubmed ID\'s'),
    '#size' => 60
  );
  $form['queue'] = array( 
    '#type' => 'select',
    '#title' => t('Moderation Queue'),
    '#options' => $queue_options,
    '#default_value' => 'not_reviewed', 
    '#description' => t('Moderation queue to append papers to.')
  );
  /** Temporarily Disabled
  $form['batch_process'] = array (
    '#type' => 'checkbox',
    '#title' => t('Batch Process'),
    '#default_value' => 1,
    '#description' => t('You should use batch processing if your import file contains more than about 20 records, or if you are experiencing script timeouts during import'),
  );
  **/
  $form['batch_process'] = array(
    '#type' => 'value',
    '#value' => 0,
  );
  $form['nid'] = array( 
    '#type' => 'value',
    '#value' => $node->nid,
  );
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  $form['button'] = array ('#type' => 'submit', '#value' => t('Import'));
  return $form;
}  

/**
 * Implementation of hook_validate() for the journalstream_biblio_import_form.
 */
function journalstream_biblio_import_form_validate($form, &$form_state) {
  $op = $form_state['values']['op'];
  $filetype = $form_state['values']['filetype'];

  // Test for either the raw input or the file.
  if (!$form_state['values']['journalstream_biblio_import_raw'] && !$_FILES['files']['name']['journalstream_biblio_import_file']) {
    form_set_error('journalstream_biblio_import_form', t("You must either select a file or paste import data."));
  }

  if ($op == t('Import') && $filetype == "none") {
    form_set_error('journalstream_biblio_import_form', t("Error: You must select a file type"));
  } 

  if (!$form_state['values']['journalstream_biblio_import_raw'] && $error = $_FILES['files']['error']['journalstream_biblio_import_file']) {
    switch ($error){
      case 1: form_set_error('journalstream_biblio_import_form', t("The uploaded file exceeds the upload_max_filesize directive in php.ini."));
      break;
      case 2: form_set_error('journalstream_biblio_import_form', t("The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form."));
      break;
      case 3: form_set_error('journalstream_biblio_import_form', t("The uploaded file was only partially uploaded."));
      break;
      case 4: form_set_error('journalstream_biblio_import_form', t("No file was uploaded."));
      break;
      case 6: form_set_error('journalstream_biblio_import_form', t("Missing a temporary folder."));
      break;
      case 7: form_set_error('journalstream_biblio_import_form', t("Failed to write file to disk."));
      break;
      case 8: form_set_error('journalstream_biblio_import_form', t("File upload stopped by extension."));
    }
  }
}

/**
 * Implementation of hook_submit() for the journalstream_biblio_import_form.
 */
function journalstream_biblio_import_form_submit($form, & $form_state) {
  global $batch_proc;
  global $session_id;
  global $user;

  $import_file = FALSE;
  $batch_proc = ($form_state['values']['batch_process'] == 1) ? TRUE : FALSE;
  $userid = (isset ($form_state['values']['userid'])) ? $form_state['values']['userid'] : $user->uid;
  $queue = (isset ($form_state['values']['queue'])) ? $form_state['values']['queue'] : 'not_reviewed';
  $nid = (isset ($form_state['values']['nid'])) ? $form_state['values']['nid'] : FALSE; 
  $filetype = $form_state['values']['filetype'];
  //Vars needed by biblio_import()
  $terms = array();
  $session_id = microtime();
  $dummy = array();

  if (!$form_state['values']['op'] == t('Import') && !isset($form_state['values']['filetype'])) {
    return;
  }

  // Stores the raw input data in a file.
  if ($raw = $form_state['values']['journalstream_biblio_import_raw']) {
    // In the case of a raw input containing no LF, we check if it contains
    // a comma separated list of IDs and format it as LF separated list.
    if (strpos($raw, "\n") === FALSE) {
      $raw = implode("\n", drupal_explode_tags($raw));
    }
    $import_file = file_save_data($raw, 'temporary://pow_raw_import' . mt_rand());
  }
  else {
    $import_file = file_save_upload('journalstream_biblio_import_file');
  }

  if(!$import_file) {
    drupal_set_message(t("File was NOT successfully uploaded"), 'error');
    return;
  }

  //Handle Batch Processing (if applicable)
  //Disabled for now (as it is too complex)
  $batch_proc = false;
  if($batch_proc) {
    $filesize = (int) $import_file->filesize / 1024;
    $batch_op = array(
      'title' => t('Importing @filename', array('@filename' => $import_file->filename . $filesize)),
      'operations' => array(
        array('journalstream_biblio_import', array($import_file, $filetype, $userid, $terms, $batch_proc, $session_id)),
        array('journalstream_biblio_import_batch_operations', array($session_id, $user, $userid, $terms))
      ),
      'progressive' => TRUE,
      'finished' => 'journalstream_biblio_import_batch_finished',
      'init_message' => t('Parsing file...'),
      'progress_message' => t('Saving nodes...'),
      #'file' => './' . drupal_get_path('module', 'biblio') . '/includes/biblio.import.export.inc'
    );
    batch_set($batch_op);
    //$base = variable_get('biblio_base', 'biblio');
    $base = 'node/' . $nid;
    batch_process("$base/import");
  }
  else {
    $pnids= journalstream_biblio_import($import_file, $filetype, $userid, $terms, $batch_proc, $session_id, $dummy);
    //Add imported nodes to queue
    journalstream_add_to_queue($pnids,$nid, $queue);  
    drupal_set_message(t("Successfully imported " . count($pnids) . " papers."));
  }
  file_delete($import_file);
  //Go to assigned queue
  $path = 'node/' . $nid . '/' . $queue;
  drupal_goto($path);
}

/**
 * Implements biblio_import()
*/
function journalstream_biblio_import($import_file, $filetype, $userid, $terms, $batch_proc, $session_id, $dummy) {
  require('./'. drupal_get_path('module', 'biblio') .'/includes/biblio.import.export.inc');
  return biblio_import($import_file, $filetype, $userid, $terms, $batch_proc, $session_id, $dummy);
}